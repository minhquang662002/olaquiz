// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  avatar    String   @default("https://gamek.mediacdn.vn/133514250583805952/2021/12/1/photo-1-1638349281733769557330.png")
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int      @default(3)
  results   Result[]
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique
  User User[]
}

model Post {
  id        String   @id @default(uuid())
  title     String
  category  String
  image     String
  summary   String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vocabulary {
  id         String @id @default(uuid())
  image      String
  word       String
  spelling   String
  definition String
  example    String
  audio      String
  topic      Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId    String
}

model Topic {
  id           String       @id @default(uuid())
  title        String       @unique
  image        String
  vocabularies Vocabulary[]
}

model Test {
  id        String     @id @default(uuid())
  name      String     @unique
  type      String
  results   Result[]
  questions Question[]
}

model Exercise {
  id        String     @id @default(uuid())
  name      String     @unique
  type      String
  questions Question[]
}

model Question {
  id           String    @id @default(uuid())
  image        String?
  audio        String?
  paragraph    String?
  explaination String?
  question     String?
  option_1     String
  option_2     String
  option_3     String
  option_4     String?
  answer       String
  Test         Test?     @relation(fields: [testId], references: [id])
  testId       String?
  Exercise     Exercise? @relation(fields: [exerciseId], references: [id])
  exerciseId   String?
}

model Result {
  id            String  @id @default(uuid())
  listen_score  Int
  reading_score Int
  User          User?   @relation(fields: [userId], references: [id])
  userId        String?
  Test          Test?   @relation(fields: [testId], references: [id])
  testId        String?
}
